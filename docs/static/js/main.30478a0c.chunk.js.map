{"version":3,"sources":["components/AddCategory.tsx","components/Footer.tsx","helpers/getGifs.ts","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGifs.tsx","GifExpertApp.jsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","placeholder","Footer","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","defaultCategories","categories","cat","i","ReactDOM","render","document","getElementById"],"mappings":"8KAWaA,EAAiC,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAE9BC,mBAAS,IAFqB,mBAE3DC,EAF2D,KAE/CC,EAF+C,KAuBlE,OACI,uBAAMC,SAfW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAI3BR,GAAe,iBAAM,CAAEE,MACvBC,EAAc,MAMlB,UACI,4BAAID,IACJ,uBACIO,KAAK,OACLC,MAAOR,EACPS,SAzBc,SAACN,GAEvBF,EAAcE,EAAEO,OAAOF,QAwBfG,YAAY,kBCtCfC,EAAS,WAClB,OACI,gCACI,uBACA,mE,8BCNCC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAETC,EAFS,iDAEwCC,UAAWH,GAFnD,+DAIII,MAAMF,GAJV,cAITG,EAJS,gBAKQA,EAAKC,OALb,uBAKPC,EALO,EAKPA,KAEFC,EAAOD,EAAKE,KAAK,SAACC,GAAa,IAAD,EAEhC,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZ3B,kBAiBRM,GAjBQ,4CAAH,sDCUPO,EAAiC,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAExD,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,IACJ,qCAAQD,SCHPQ,EAA6B,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECXhC,SAACA,GAAsB,IAAD,EAEpBf,mBAAc,CACpCsB,KAAM,GACNa,SAAS,IAJiC,mBAEvCC,EAFuC,KAEhCC,EAFgC,KAqB9C,OAdAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAM,SAAAC,GAGHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDN0BK,CAAa1B,GAAjCa,EAJ2C,EAIhDN,KAAaa,EAJmC,EAInCA,QAErB,OACI,qCACI,6BAAKpB,IAEHoB,GAAW,2CAEb,qBAAKJ,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAESA,GADAA,EAAIC,aEzBxBgB,EAAe,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,IAEpB3C,mBAAS2C,GAFW,mBAEjDC,EAFiD,KAErC7C,EAFqC,KAIxD,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ6C,EAAWpB,KAAK,SAACqB,EAAKC,GAAN,OACZ,cAAC,EAAD,CAEI/B,SAAU8B,GADLC,QAMrB,gCACI,gFACA,kDAEI,yCACA,+CACA,+CACA,2EACA,mDAGR,cAAC,EAAD,Q,MC7BZC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.30478a0c.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\ntype FormElement = React.FormEvent<HTMLFormElement>;\r\n\r\ninterface IMyProps {\r\n    setCategories:any,\r\n}\r\n\r\n\r\nexport const AddCategory:React.FC<IMyProps> = ( { setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputChange = (e:any) => {\r\n\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e:FormElement) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n\r\n            //si quisiera acumular debajo los elementos buscados:\r\n            // setCategories( (cats:any) => [ inputValue, ...cats, ] );\r\n            setCategories( () => [ inputValue ] );\r\n            setInputValue(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <p>{inputValue}</p>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n                placeholder=\"Buscar...\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <div>\r\n            <hr />\r\n            <p>Copyright &copy; Ítalo Franco</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\nexport const getGifs = async( category:string ) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=SUzkNCECXqOb0ru8RNS8i5N5B5TjFTh9`; \r\n\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map( (img:any) => {\r\n           \r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url,\r\n\r\n            }\r\n        });\r\n\r\n        return gifs;\r\n\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface IMyProps {\r\n    props?: any,\r\n    id: string,\r\n    title: string,\r\n    url: string,\r\n    className: string\r\n}\r\n\r\nexport const GifGridItem:React.FC<IMyProps> = ({ id, title, url }) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__zoomIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n            <p>ID: {id}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nGifGridItem.propTypes = {\r\n\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n}","\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface IMyProps {\r\n    category:string,\r\n    className:string,\r\n    data:[],\r\n    loading:boolean,\r\n}\r\n\r\nexport const GifGrid:React.FC<IMyProps> = ( {category} ) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            { loading && <p>Loading...</p> }\r\n            \r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( (img:any) => (                    \r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n\r\n    category: PropTypes.string.isRequired,\r\n}","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category: string) => {\r\n\r\n    const [state, setState] = useState<any>({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() =>{\r\n        \r\n        getGifs(category)\r\n            .then( imgs => {\r\n\r\n                //simulate resolve data from api with setTimeout\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false,\r\n                }); \r\n            });\r\n            \r\n    }, [category])\r\n\r\n    return state;\r\n}","\r\nimport React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { Footer } from './components/Footer';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ({ defaultCategories = [] }) => {\r\n\r\n    const [categories, setCategories] = useState(defaultCategories);\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n            <ol>\r\n                { \r\n                    categories.map( (cat, i) => (\r\n                        <GifGrid\r\n                            key={i} \r\n                            category={cat}\r\n                        />\r\n                    )) \r\n                }\r\n            </ol>\r\n            <div>\r\n                <p>Encuentra aquí tus Gifs y pasa un buen rato.</p>\r\n                <ul>\r\n                    Próximamente:\r\n                    <li>Estilos</li>\r\n                    <li>Paginación</li>\r\n                    <li>Mejora del UI</li>\r\n                    <li>Posibilidad de opciones para insertar GIF</li>\r\n                    <li>Y más...</li>\r\n                </ul>    \r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}